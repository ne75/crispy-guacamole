/*     */ package paulscode.sound.codecs;
/*     */ 
/*     */ import com.jcraft.jogg.Packet;
/*     */ import com.jcraft.jogg.Page;
/*     */ import com.jcraft.jogg.StreamState;
/*     */ import com.jcraft.jogg.SyncState;
/*     */ import com.jcraft.jorbis.Block;
/*     */ import com.jcraft.jorbis.Comment;
/*     */ import com.jcraft.jorbis.DspState;
/*     */ import com.jcraft.jorbis.Info;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.net.URL;
/*     */ import java.net.URLConnection;
/*     */ import java.net.UnknownServiceException;
/*     */ import java.nio.ByteOrder;
/*     */ import javax.sound.sampled.AudioFormat;
/*     */ import paulscode.sound.ICodec;
/*     */ import paulscode.sound.SoundBuffer;
/*     */ import paulscode.sound.SoundSystemConfig;
/*     */ import paulscode.sound.SoundSystemLogger;
/*     */ 
/*     */ public class CodecJOrbis
/*     */   implements ICodec
/*     */ {
/*     */   private static final boolean GET = false;
/*     */   private static final boolean SET = true;
/*     */   private static final boolean XXX = false;
/*     */   protected URL url;
/*  82 */   protected URLConnection urlConnection = null;
/*     */   private InputStream inputStream;
/*     */   private AudioFormat audioFormat;
/*  97 */   private boolean endOfStream = false;
/*     */ 
/* 102 */   private boolean initialized = false;
/*     */ 
/* 107 */   private byte[] buffer = null;
/*     */   private int bufferSize;
/* 117 */   private int count = 0;
/*     */ 
/* 122 */   private int index = 0;
/*     */   private int convertedBufferSize;
/*     */   private float[][][] pcmInfo;
/*     */   private int[] pcmIndex;
/* 142 */   private Packet joggPacket = new Packet();
/*     */ 
/* 146 */   private Page joggPage = new Page();
/*     */ 
/* 150 */   private StreamState joggStreamState = new StreamState();
/*     */ 
/* 154 */   private SyncState joggSyncState = new SyncState();
/*     */ 
/* 158 */   private DspState jorbisDspState = new DspState();
/*     */ 
/* 162 */   private Block jorbisBlock = new Block(this.jorbisDspState);
/*     */ 
/* 166 */   private Comment jorbisComment = new Comment();
/*     */ 
/* 170 */   private Info jorbisInfo = new Info();
/*     */   private SoundSystemLogger logger;
/* 177 */   private static final boolean LITTLE_ENDIAN = ByteOrder.nativeOrder() == ByteOrder.LITTLE_ENDIAN;
/*     */ 
/*     */   public CodecJOrbis()
/*     */   {
/* 183 */     this.logger = SoundSystemConfig.getLogger();
/*     */   }
/*     */ 
/*     */   public void reverseByteOrder(boolean paramBoolean)
/*     */   {
/*     */   }
/*     */ 
/*     */   public boolean initialize(URL paramURL)
/*     */   {
/* 201 */     initialized(true, false);
/*     */ 
/* 203 */     if (this.joggStreamState != null) this.joggStreamState.clear();
/* 204 */     if (this.jorbisBlock != null) this.jorbisBlock.clear();
/* 205 */     if (this.jorbisDspState != null) this.jorbisDspState.clear();
/* 206 */     if (this.jorbisInfo != null) this.jorbisInfo.clear();
/* 207 */     if (this.joggSyncState != null) this.joggSyncState.clear();
/*     */ 
/* 209 */     if (this.inputStream != null)
/*     */       try {
/* 211 */         this.inputStream.close();
/*     */       }
/*     */       catch (IOException localIOException1)
/*     */       {
/*     */       }
/* 216 */     this.url = paramURL;
/* 217 */     this.bufferSize = (SoundSystemConfig.getStreamingBufferSize() / 2);
/*     */ 
/* 219 */     this.buffer = null;
/* 220 */     this.count = 0;
/* 221 */     this.index = 0;
/*     */ 
/* 223 */     this.joggStreamState = new StreamState();
/* 224 */     this.jorbisBlock = new Block(this.jorbisDspState);
/* 225 */     this.jorbisDspState = new DspState();
/* 226 */     this.jorbisInfo = new Info();
/* 227 */     this.joggSyncState = new SyncState();
/*     */     try
/*     */     {
/* 230 */       this.urlConnection = paramURL.openConnection();
/*     */     } catch (UnknownServiceException localUnknownServiceException) {
/* 232 */       errorMessage("Unable to create a UrlConnection in method 'initialize'.");
/* 233 */       printStackTrace(localUnknownServiceException);
/* 234 */       cleanup();
/* 235 */       return false;
/*     */     } catch (IOException localIOException2) {
/* 237 */       errorMessage("Unable to create a UrlConnection in method 'initialize'.");
/* 238 */       printStackTrace(localIOException2);
/* 239 */       cleanup();
/* 240 */       return false;
/*     */     }
/*     */ 
/* 243 */     if (this.urlConnection != null) {
/*     */       try {
/* 245 */         this.inputStream = openInputStream();
/*     */       } catch (IOException localIOException3) {
/* 247 */         errorMessage("Unable to acquire inputstream in method 'initialize'.");
/* 248 */         printStackTrace(localIOException3);
/* 249 */         cleanup();
/* 250 */         return false;
/*     */       }
/*     */     }
/*     */ 
/* 254 */     endOfStream(true, false);
/*     */ 
/* 256 */     this.joggSyncState.init();
/* 257 */     this.joggSyncState.buffer(this.bufferSize);
/* 258 */     this.buffer = this.joggSyncState.data;
/*     */     try
/*     */     {
/* 261 */       if (!readHeader()) {
/* 262 */         errorMessage("Error reading the header");
/* 263 */         return false;
/*     */       }
/*     */     } catch (IOException localIOException4) {
/* 266 */       errorMessage("Error reading the header");
/* 267 */       return false;
/*     */     }
/*     */ 
/* 270 */     this.convertedBufferSize = (this.bufferSize * 2);
/*     */ 
/* 272 */     this.jorbisDspState.synthesis_init(this.jorbisInfo);
/* 273 */     this.jorbisBlock.init(this.jorbisDspState);
/*     */ 
/* 275 */     int i = this.jorbisInfo.channels;
/* 276 */     int j = this.jorbisInfo.rate;
/*     */ 
/* 278 */     this.audioFormat = new AudioFormat(j, 16, i, true, false);
/*     */ 
/* 280 */     this.pcmInfo = new float[1][][];
/* 281 */     this.pcmIndex = new int[this.jorbisInfo.channels];
/*     */ 
/* 283 */     initialized(true, true);
/*     */ 
/* 285 */     return true;
/*     */   }
/*     */ 
/*     */   protected InputStream openInputStream() {
/* 289 */     return this.urlConnection.getInputStream();
/*     */   }
/*     */ 
/*     */   public boolean initialized()
/*     */   {
/* 298 */     return initialized(false, false);
/*     */   }
/*     */ 
/*     */   public SoundBuffer read()
/*     */   {
/* 309 */     byte[] arrayOfByte = readBytes();
/*     */ 
/* 311 */     if (arrayOfByte == null) return null;
/*     */ 
/* 313 */     return new SoundBuffer(arrayOfByte, this.audioFormat);
/*     */   }
/*     */ 
/*     */   public SoundBuffer readAll()
/*     */   {
/* 325 */     byte[] arrayOfByte = readBytes();
/*     */ 
/* 327 */     while (!endOfStream(false, false)) {
/* 328 */       arrayOfByte = appendByteArrays(arrayOfByte, readBytes());
/* 329 */       if ((arrayOfByte == null) || (arrayOfByte.length < SoundSystemConfig.getMaxFileSize()))
/*     */         continue;
/*     */     }
/* 332 */     return new SoundBuffer(arrayOfByte, this.audioFormat);
/*     */   }
/*     */ 
/*     */   public boolean endOfStream()
/*     */   {
/* 341 */     return endOfStream(false, false);
/*     */   }
/*     */ 
/*     */   public void cleanup()
/*     */   {
/* 349 */     this.joggStreamState.clear();
/* 350 */     this.jorbisBlock.clear();
/* 351 */     this.jorbisDspState.clear();
/* 352 */     this.jorbisInfo.clear();
/* 353 */     this.joggSyncState.clear();
/*     */ 
/* 355 */     if (this.inputStream != null)
/*     */       try {
/* 357 */         this.inputStream.close();
/*     */       }
/*     */       catch (IOException localIOException)
/*     */       {
/*     */       }
/* 362 */     this.joggStreamState = null;
/* 363 */     this.jorbisBlock = null;
/* 364 */     this.jorbisDspState = null;
/* 365 */     this.jorbisInfo = null;
/* 366 */     this.joggSyncState = null;
/* 367 */     this.inputStream = null;
/*     */   }
/*     */ 
/*     */   public AudioFormat getAudioFormat()
/*     */   {
/* 377 */     return this.audioFormat;
/*     */   }
/*     */ 
/*     */   private boolean readHeader()
/*     */   {
/* 388 */     this.index = this.joggSyncState.buffer(this.bufferSize);
/*     */ 
/* 390 */     int i = this.inputStream.read(this.joggSyncState.data, this.index, this.bufferSize);
/* 391 */     if (i < 0) i = 0;
/*     */ 
/* 393 */     this.joggSyncState.wrote(i);
/*     */ 
/* 395 */     if (this.joggSyncState.pageout(this.joggPage) != 1)
/*     */     {
/* 397 */       if (i < this.bufferSize) return true;
/*     */ 
/* 399 */       errorMessage("Ogg header not recognized in method 'readHeader'.");
/* 400 */       return false;
/*     */     }
/*     */ 
/* 404 */     this.joggStreamState.init(this.joggPage.serialno());
/*     */ 
/* 406 */     this.jorbisInfo.init();
/* 407 */     this.jorbisComment.init();
/* 408 */     if (this.joggStreamState.pagein(this.joggPage) < 0) {
/* 409 */       errorMessage("Problem with first Ogg header page in method 'readHeader'.");
/* 410 */       return false;
/*     */     }
/*     */ 
/* 413 */     if (this.joggStreamState.packetout(this.joggPacket) != 1) {
/* 414 */       errorMessage("Problem with first Ogg header packet in method 'readHeader'.");
/* 415 */       return false;
/*     */     }
/*     */ 
/* 418 */     if (this.jorbisInfo.synthesis_headerin(this.jorbisComment, this.joggPacket) < 0) {
/* 419 */       errorMessage("File does not contain Vorbis header in method 'readHeader'.");
/* 420 */       return false;
/*     */     }
/*     */ 
/* 423 */     int j = 0;
/* 424 */     while (j < 2) {
/* 425 */       while (j < 2) {
/* 426 */         int k = this.joggSyncState.pageout(this.joggPage);
/* 427 */         if (k == 0) break;
/* 428 */         if (k == 1) {
/* 429 */           this.joggStreamState.pagein(this.joggPage);
/* 430 */           while (j < 2) {
/* 431 */             k = this.joggStreamState.packetout(this.joggPacket);
/* 432 */             if (k == 0)
/*     */               break;
/* 434 */             if (k == -1) {
/* 435 */               errorMessage("Secondary Ogg header corrupt in method 'readHeader'.");
/* 436 */               return false;
/*     */             }
/*     */ 
/* 439 */             this.jorbisInfo.synthesis_headerin(this.jorbisComment, this.joggPacket);
/* 440 */             j++;
/*     */           }
/*     */         }
/*     */       }
/* 444 */       this.index = this.joggSyncState.buffer(this.bufferSize);
/* 445 */       i = this.inputStream.read(this.joggSyncState.data, this.index, this.bufferSize);
/* 446 */       if (i < 0) i = 0;
/* 447 */       if ((i == 0) && (j < 2)) {
/* 448 */         errorMessage("End of file reached before finished readingOgg header in method 'readHeader'");
/* 449 */         return false;
/*     */       }
/*     */ 
/* 452 */       this.joggSyncState.wrote(i);
/*     */     }
/*     */ 
/* 455 */     this.index = this.joggSyncState.buffer(this.bufferSize);
/* 456 */     this.buffer = this.joggSyncState.data;
/*     */ 
/* 458 */     return true;
/*     */   }
/*     */ 
/*     */   private byte[] readBytes()
/*     */   {
/* 467 */     if (!initialized(false, false)) return null;
/*     */ 
/* 469 */     if (endOfStream(false, false)) return null;
/*     */ 
/* 471 */     byte[] arrayOfByte = null;
/*     */ 
/* 473 */     switch (this.joggSyncState.pageout(this.joggPage))
/*     */     {
/*     */     case -1:
/*     */     case 0:
/* 478 */       endOfStream(true, true);
/* 479 */       break;
/*     */     case 1:
/* 483 */       this.joggStreamState.pagein(this.joggPage);
/* 484 */       if (this.joggPage.granulepos() == 0L) {
/* 485 */         endOfStream(true, true);
/*     */       }
/*     */       else {
/*     */         while (true) {
/* 489 */           switch (this.joggStreamState.packetout(this.joggPacket))
/*     */           {
/*     */           case -1:
/*     */           case 0:
/* 494 */             break;
/*     */           case 1:
/* 498 */             arrayOfByte = appendByteArrays(arrayOfByte, decodeCurrentPacket());
/*     */           }
/*     */         }
/*     */ 
/* 502 */         if (this.joggPage.eos() == 0) break; endOfStream(true, true);
/*     */       }
/*     */     }
/* 505 */     if (!endOfStream(false, false)) {
/* 506 */       this.index = this.joggSyncState.buffer(this.bufferSize);
/* 507 */       if (this.index == -1) { endOfStream(true, true);
/*     */       } else {
/* 509 */         this.buffer = this.joggSyncState.data;
/*     */         try
/*     */         {
/* 512 */           this.count = this.inputStream.read(this.buffer, this.index, this.bufferSize);
/*     */         } catch (Exception localException) {
/* 514 */           printStackTrace(localException);
/* 515 */           return arrayOfByte;
/*     */         }
/* 517 */         this.joggSyncState.wrote(this.count);
/* 518 */         if (this.count == 0) endOfStream(true, true);
/*     */       }
/*     */     }
/* 521 */     return arrayOfByte;
/*     */   }
/*     */ 
/*     */   private byte[] decodeCurrentPacket()
/*     */   {
/* 530 */     byte[] arrayOfByte = new byte[this.convertedBufferSize];
/*     */ 
/* 534 */     if (this.jorbisBlock.synthesis(this.joggPacket) == 0) this.jorbisDspState.synthesis_blockin(this.jorbisBlock);
/*     */ 
/* 537 */     int k = this.convertedBufferSize / (this.jorbisInfo.channels * 2);
/* 538 */     int m = 0;
/*     */     int i;
/* 540 */     while ((m < this.convertedBufferSize) && ((i = this.jorbisDspState.synthesis_pcmout(this.pcmInfo, this.pcmIndex)) > 0))
/*     */     {
/* 541 */       int j;
/* 541 */       if (i < k) j = i; else
/* 542 */         j = k;
/* 543 */       for (int n = 0; n < this.jorbisInfo.channels; n++) {
/* 544 */         int i1 = n * 2;
/* 545 */         for (int i2 = 0; i2 < j; i2++) {
/* 546 */           int i3 = (int)(this.pcmInfo[0][n][(this.pcmIndex[n] + i2)] * 32767.0F);
/* 547 */           if (i3 > 32767) {
/* 548 */             i3 = 32767;
/*     */           }
/* 550 */           if (i3 < -32768) {
/* 551 */             i3 = -32768;
/*     */           }
/* 553 */           if (i3 < 0) i3 |= 32768;
/*     */ 
/* 555 */           if (LITTLE_ENDIAN) {
/* 556 */             arrayOfByte[(m + i1)] = (byte)i3;
/* 557 */             arrayOfByte[(m + i1 + 1)] = (byte)(i3 >>> 8);
/*     */           } else {
/* 559 */             arrayOfByte[(m + i1 + 1)] = (byte)i3;
/* 560 */             arrayOfByte[(m + i1)] = (byte)(i3 >>> 8);
/*     */           }
/*     */ 
/* 564 */           i1 += 2 * this.jorbisInfo.channels;
/*     */         }
/*     */       }
/* 567 */       m += j * this.jorbisInfo.channels * 2;
/* 568 */       this.jorbisDspState.synthesis_read(j);
/*     */     }
/* 570 */     arrayOfByte = trimArray(arrayOfByte, m);
/*     */ 
/* 572 */     return arrayOfByte;
/*     */   }
/*     */ 
/*     */   private synchronized boolean initialized(boolean paramBoolean1, boolean paramBoolean2)
/*     */   {
/* 585 */     if (paramBoolean1 == true) this.initialized = paramBoolean2;
/* 586 */     return this.initialized;
/*     */   }
/*     */ 
/*     */   private synchronized boolean endOfStream(boolean paramBoolean1, boolean paramBoolean2)
/*     */   {
/* 599 */     if (paramBoolean1 == true) this.endOfStream = paramBoolean2;
/* 600 */     return this.endOfStream;
/*     */   }
/*     */ 
/*     */   private static byte[] trimArray(byte[] paramArrayOfByte, int paramInt)
/*     */   {
/* 614 */     byte[] arrayOfByte = null;
/* 615 */     if ((paramArrayOfByte != null) && (paramArrayOfByte.length > paramInt)) {
/* 616 */       arrayOfByte = new byte[paramInt];
/* 617 */       System.arraycopy(paramArrayOfByte, 0, arrayOfByte, 0, paramInt);
/*     */     }
/* 619 */     return arrayOfByte;
/*     */   }
/*     */ 
/*     */   private static byte[] appendByteArrays(byte[] paramArrayOfByte1, byte[] paramArrayOfByte2)
/*     */   {
/* 634 */     if ((paramArrayOfByte1 == null) && (paramArrayOfByte2 == null))
/*     */     {
/* 636 */       return null;
/*     */     }
/*     */     byte[] arrayOfByte;
/* 637 */     if (paramArrayOfByte1 == null)
/*     */     {
/* 639 */       arrayOfByte = new byte[paramArrayOfByte2.length];
/*     */ 
/* 641 */       System.arraycopy(paramArrayOfByte2, 0, arrayOfByte, 0, paramArrayOfByte2.length);
/* 642 */       paramArrayOfByte2 = null;
/* 643 */     } else if (paramArrayOfByte2 == null)
/*     */     {
/* 645 */       arrayOfByte = new byte[paramArrayOfByte1.length];
/*     */ 
/* 647 */       System.arraycopy(paramArrayOfByte1, 0, arrayOfByte, 0, paramArrayOfByte1.length);
/* 648 */       paramArrayOfByte1 = null;
/*     */     }
/*     */     else {
/* 651 */       arrayOfByte = new byte[paramArrayOfByte1.length + paramArrayOfByte2.length];
/* 652 */       System.arraycopy(paramArrayOfByte1, 0, arrayOfByte, 0, paramArrayOfByte1.length);
/*     */ 
/* 654 */       System.arraycopy(paramArrayOfByte2, 0, arrayOfByte, paramArrayOfByte1.length, paramArrayOfByte2.length);
/* 655 */       paramArrayOfByte1 = null;
/* 656 */       paramArrayOfByte2 = null;
/*     */     }
/*     */ 
/* 659 */     return arrayOfByte;
/*     */   }
/*     */ 
/*     */   private void errorMessage(String paramString)
/*     */   {
/* 669 */     this.logger.errorMessage("CodecJOrbis", paramString, 0);
/*     */   }
/*     */ 
/*     */   private void printStackTrace(Exception paramException)
/*     */   {
/* 679 */     this.logger.printStackTrace(paramException, 1);
/*     */   }
/*     */ }

/* Location:           /Users/Nikita/Downloads/mcp28/jars/bin/minecraft.jar
 * Qualified Name:     paulscode.sound.codecs.CodecJOrbis
 * JD-Core Version:    0.6.0
 */