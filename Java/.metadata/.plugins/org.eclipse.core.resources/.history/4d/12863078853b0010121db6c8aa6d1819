/*     */ import java.io.File;
/*     */ import java.io.FileInputStream;
/*     */ import java.io.FileOutputStream;
/*     */ import java.io.PrintStream;
/*     */ import java.util.Collection;
/*     */ import java.util.Iterator;
/*     */ import java.util.List;
/*     */ import java.util.Map;
/*     */ 
/*     */ public class oj
/*     */   implements ao
/*     */ {
/*     */   private File a;
/*     */   private boolean b;
/*     */ 
/*     */   public oj(File paramFile, boolean paramBoolean)
/*     */   {
/*  17 */     this.a = paramFile;
/*  18 */     this.b = paramBoolean;
/*     */   }
/*     */ 
/*     */   private File a(int paramInt1, int paramInt2) {
/*  22 */     String str1 = "c." + Integer.toString(paramInt1, 36) + "." + Integer.toString(paramInt2, 36) + ".dat";
/*  23 */     String str2 = Integer.toString(paramInt1 & 0x3F, 36);
/*  24 */     String str3 = Integer.toString(paramInt2 & 0x3F, 36);
/*  25 */     File localFile = new File(this.a, str2);
/*  26 */     if (!localFile.exists()) {
/*  27 */       if (this.b) localFile.mkdir(); else
/*  28 */         return null;
/*     */     }
/*  30 */     localFile = new File(localFile, str3);
/*  31 */     if (!localFile.exists()) {
/*  32 */       if (this.b) localFile.mkdir(); else
/*  33 */         return null;
/*     */     }
/*  35 */     localFile = new File(localFile, str1);
/*  36 */     if ((!localFile.exists()) && 
/*  37 */       (!this.b)) return null;
/*     */ 
/*  39 */     return localFile;
/*     */   }
/*     */ 
/*     */   public ib a(dn paramdn, int paramInt1, int paramInt2) {
/*  43 */     File localFile = a(paramInt1, paramInt2);
/*  44 */     if ((localFile != null) && (localFile.exists())) {
/*     */       try
/*     */       {
/*  47 */         FileInputStream localFileInputStream = new FileInputStream(localFile);
/*  48 */         jw localjw = ag.a(localFileInputStream);
/*  49 */         if (!localjw.b("Level")) {
/*  50 */           System.out.println("Chunk file at " + paramInt1 + "," + paramInt2 + " is missing level data, skipping");
/*  51 */           return null;
/*     */         }
/*  53 */         if (!localjw.k("Level").b("Blocks")) {
/*  54 */           System.out.println("Chunk file at " + paramInt1 + "," + paramInt2 + " is missing block data, skipping");
/*  55 */           return null;
/*     */         }
/*  57 */         ib localib = a(paramdn, localjw.k("Level"));
/*  58 */         if (!localib.a(paramInt1, paramInt2)) {
/*  59 */           System.out.println("Chunk file at " + paramInt1 + "," + paramInt2 + " is in the wrong location; relocating. (Expected " + paramInt1 + ", " + paramInt2 + ", got " + localib.j + ", " + localib.k + ")");
/*  60 */           localjw.a("xPos", paramInt1);
/*  61 */           localjw.a("zPos", paramInt2);
/*  62 */           localib = a(paramdn, localjw.k("Level"));
/*     */         }
/*  64 */         return localib;
/*     */       } catch (Exception localException) {
/*  66 */         localException.printStackTrace();
/*     */       }
/*     */     }
/*  69 */     return null;
/*     */   }
/*     */ 
/*     */   public void a(dn paramdn, ib paramib) {
/*  73 */     paramdn.o();
/*  74 */     File localFile1 = a(paramib.j, paramib.k);
/*  75 */     if (localFile1.exists()) {
/*  76 */       paramdn.v -= localFile1.length();
/*     */     }
/*     */     try
/*     */     {
/*  80 */       File localFile2 = new File(this.a, "tmp_chunk.dat");
/*     */ 
/*  83 */       FileOutputStream localFileOutputStream = new FileOutputStream(localFile2);
/*  84 */       jw localjw1 = new jw();
/*  85 */       jw localjw2 = new jw();
/*  86 */       localjw1.a("Level", localjw2);
/*  87 */       a(paramib, paramdn, localjw2);
/*  88 */       ag.a(localjw1, localFileOutputStream);
/*  89 */       localFileOutputStream.close();
/*     */ 
/*  91 */       if (localFile1.exists()) {
/*  92 */         localFile1.delete();
/*     */       }
/*  94 */       localFile2.renameTo(localFile1);
/*     */ 
/*  96 */       paramdn.v += localFile1.length();
/*     */     } catch (Exception localException) {
/*  98 */       localException.printStackTrace();
/*     */     }
/*     */   }
/*     */ 
/*     */   public void a(ib paramib, dn paramdn, jw paramjw) {
/* 103 */     paramdn.o();
/* 104 */     paramjw.a("xPos", paramib.j);
/* 105 */     paramjw.a("zPos", paramib.k);
/* 106 */     paramjw.a("LastUpdate", paramdn.e);
/* 107 */     paramjw.a("Blocks", paramib.b);
/* 108 */     paramjw.a("Data", paramib.e.a);
/* 109 */     paramjw.a("SkyLight", paramib.f.a);
/* 110 */     paramjw.a("BlockLight", paramib.g.a);
/* 111 */     paramjw.a("HeightMap", paramib.h);
/* 112 */     paramjw.a("TerrainPopulated", paramib.n);
/*     */ 
/* 114 */     paramib.q = false;
/* 115 */     nn localnn1 = new nn();
/*     */     Object localObject;
/*     */     jw localjw;
/* 116 */     for (int i = 0; i < paramib.m.length; i++) {
/* 117 */       for (localIterator = paramib.m[i].iterator(); localIterator.hasNext(); ) { localObject = (nl)localIterator.next();
/* 118 */         paramib.q = true;
/* 119 */         localjw = new jw();
/* 120 */         if (((nl)localObject).c(localjw)) {
/* 121 */           localnn1.a(localjw);
/*     */         }
/*     */       }
/*     */     }
/* 125 */     paramjw.a("Entities", localnn1);
/*     */ 
/* 127 */     nn localnn2 = new nn();
/* 128 */     for (Iterator localIterator = paramib.l.values().iterator(); localIterator.hasNext(); ) { localObject = (kp)localIterator.next();
/* 129 */       localjw = new jw();
/* 130 */       ((kp)localObject).b(localjw);
/* 131 */       localnn2.a(localjw);
/*     */     }
/* 133 */     paramjw.a("TileEntities", localnn2);
/*     */   }
/*     */ 
/*     */   public static ib a(dn paramdn, jw paramjw)
/*     */   {
/* 138 */     int i = paramjw.e("xPos");
/* 139 */     int j = paramjw.e("zPos");
/*     */ 
/* 141 */     ib localib = new ib(paramdn, i, j);
/* 142 */     localib.b = paramjw.j("Blocks");
/* 143 */     localib.e = new ql(paramjw.j("Data"));
/* 144 */     localib.f = new ql(paramjw.j("SkyLight"));
/* 145 */     localib.g = new ql(paramjw.j("BlockLight"));
/* 146 */     localib.h = paramjw.j("HeightMap");
/* 147 */     localib.n = paramjw.m("TerrainPopulated");
/*     */ 
/* 149 */     if (!localib.e.a()) {
/* 150 */       localib.e = new ql(localib.b.length);
/*     */     }
/*     */ 
/* 153 */     if ((localib.h == null) || (!localib.f.a())) {
/* 154 */       localib.h = new byte[256];
/* 155 */       localib.f = new ql(localib.b.length);
/* 156 */       localib.c();
/*     */     }
/*     */ 
/* 159 */     if (!localib.g.a()) {
/* 160 */       localib.g = new ql(localib.b.length);
/* 161 */       localib.a();
/*     */     }
/*     */ 
/* 164 */     nn localnn1 = paramjw.l("Entities");
/*     */     Object localObject;
/* 165 */     if (localnn1 != null) {
/* 166 */       for (int k = 0; k < localnn1.c(); k++) {
/* 167 */         jw localjw = (jw)localnn1.a(k);
/* 168 */         localObject = gn.a(localjw, paramdn);
/* 169 */         localib.q = true;
/* 170 */         if (localObject != null) {
/* 171 */           localib.a((nl)localObject);
/*     */         }
/*     */       }
/*     */     }
/*     */ 
/* 176 */     nn localnn2 = paramjw.l("TileEntities");
/* 177 */     if (localnn2 != null) {
/* 178 */       for (int m = 0; m < localnn2.c(); m++) {
/* 179 */         localObject = (jw)localnn2.a(m);
/* 180 */         kp localkp = kp.c((jw)localObject);
/* 181 */         if (localkp != null) {
/* 182 */           localib.a(localkp);
/*     */         }
/*     */       }
/*     */     }
/*     */ 
/* 187 */     return (ib)localib;
/*     */   }
/*     */ 
/*     */   public void a()
/*     */   {
/*     */   }
/*     */ 
/*     */   public void b()
/*     */   {
/*     */   }
/*     */ 
/*     */   public void b(dn paramdn, ib paramib)
/*     */   {
/*     */   }
/*     */ }

/* Location:           /Users/Nikita/Downloads/mcp28/jars/bin/minecraft.jar
 * Qualified Name:     oj
 * JD-Core Version:    0.6.0
 */