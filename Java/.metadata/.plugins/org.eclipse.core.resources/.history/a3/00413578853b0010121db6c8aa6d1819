/*     */ package paulscode.sound.codecs;
/*     */ 
/*     */ import B;
/*     */ import java.io.BufferedInputStream;
/*     */ import java.io.IOException;
/*     */ import java.net.URL;
/*     */ import java.nio.ByteBuffer;
/*     */ import java.nio.ByteOrder;
/*     */ import java.nio.ShortBuffer;
/*     */ import javax.sound.sampled.AudioFormat;
/*     */ import javax.sound.sampled.AudioInputStream;
/*     */ import javax.sound.sampled.AudioSystem;
/*     */ import javax.sound.sampled.UnsupportedAudioFileException;
/*     */ import paulscode.sound.ICodec;
/*     */ import paulscode.sound.SoundBuffer;
/*     */ import paulscode.sound.SoundSystemConfig;
/*     */ import paulscode.sound.SoundSystemLogger;
/*     */ 
/*     */ public class CodecWav
/*     */   implements ICodec
/*     */ {
/*     */   private static final boolean GET = false;
/*     */   private static final boolean SET = true;
/*     */   private static final boolean XXX = false;
/*  76 */   private boolean endOfStream = false;
/*     */ 
/*  81 */   private boolean initialized = false;
/*     */ 
/*  86 */   private AudioInputStream myAudioInputStream = null;
/*     */   private SoundSystemLogger logger;
/*     */ 
/*     */   public void reverseByteOrder(boolean paramBoolean)
/*     */   {
/*     */   }
/*     */ 
/*     */   public CodecWav()
/*     */   {
/* 105 */     this.logger = SoundSystemConfig.getLogger();
/*     */   }
/*     */ 
/*     */   public boolean initialize(URL paramURL)
/*     */   {
/* 116 */     initialized(true, false);
/* 117 */     cleanup();
/*     */ 
/* 119 */     if (paramURL == null)
/*     */     {
/* 121 */       errorMessage("url null in method 'initialize'");
/* 122 */       cleanup();
/* 123 */       return false;
/*     */     }
/*     */ 
/*     */     try
/*     */     {
/* 128 */       this.myAudioInputStream = AudioSystem.getAudioInputStream(new BufferedInputStream(paramURL.openStream()));
/*     */     }
/*     */     catch (UnsupportedAudioFileException localUnsupportedAudioFileException)
/*     */     {
/* 133 */       errorMessage("Unsupported audio format in method 'initialize'");
/* 134 */       printStackTrace(localUnsupportedAudioFileException);
/* 135 */       return false;
/*     */     }
/*     */     catch (IOException localIOException)
/*     */     {
/* 139 */       errorMessage("Error setting up audio input stream in method 'initialize'");
/*     */ 
/* 141 */       printStackTrace(localIOException);
/* 142 */       return false;
/*     */     }
/*     */ 
/* 145 */     endOfStream(true, false);
/* 146 */     initialized(true, true);
/* 147 */     return true;
/*     */   }
/*     */ 
/*     */   public boolean initialized()
/*     */   {
/* 156 */     return initialized(false, false);
/*     */   }
/*     */ 
/*     */   public SoundBuffer read()
/*     */   {
/* 167 */     if (this.myAudioInputStream == null) {
/* 168 */       return null;
/*     */     }
/*     */ 
/* 171 */     AudioFormat localAudioFormat = this.myAudioInputStream.getFormat();
/*     */ 
/* 174 */     if (localAudioFormat == null)
/*     */     {
/* 176 */       errorMessage("Audio Format null in method 'read'");
/* 177 */       return null;
/*     */     }
/*     */ 
/* 181 */     int i = 0; int j = 0;
/*     */ 
/* 184 */     byte[] arrayOfByte1 = new byte[SoundSystemConfig.getStreamingBufferSize()];
/*     */     try
/*     */     {
/* 191 */       while ((!endOfStream(false, false)) && (i < arrayOfByte1.length))
/*     */       {
/* 193 */         if ((j = this.myAudioInputStream.read(arrayOfByte1, i, arrayOfByte1.length - i)) <= 0)
/*     */         {
/* 197 */           endOfStream(true, true);
/* 198 */           break;
/*     */         }
/*     */ 
/* 201 */         i += j;
/*     */       }
/*     */ 
/*     */     }
/*     */     catch (IOException localIOException)
/*     */     {
/* 207 */       endOfStream(true, true);
/* 208 */       return null;
/*     */     }
/*     */ 
/* 212 */     if (i <= 0) {
/* 213 */       return null;
/*     */     }
/*     */ 
/* 216 */     if (i < arrayOfByte1.length) {
/* 217 */       arrayOfByte1 = trimArray(arrayOfByte1, i);
/*     */     }
/*     */ 
/* 221 */     byte[] arrayOfByte2 = convertAudioBytes(arrayOfByte1, localAudioFormat.getSampleSizeInBits() == 16);
/*     */ 
/* 225 */     SoundBuffer localSoundBuffer = new SoundBuffer(arrayOfByte2, localAudioFormat);
/*     */ 
/* 228 */     return localSoundBuffer;
/*     */   }
/*     */ 
/*     */   public SoundBuffer readAll()
/*     */   {
/* 241 */     if (this.myAudioInputStream == null)
/*     */     {
/* 243 */       errorMessage("Audio input stream null in method 'readAll'");
/* 244 */       return null;
/*     */     }
/* 246 */     AudioFormat localAudioFormat = this.myAudioInputStream.getFormat();
/*     */ 
/* 249 */     if (localAudioFormat == null)
/*     */     {
/* 251 */       errorMessage("Audio Format null in method 'readAll'");
/* 252 */       return null;
/*     */     }
/*     */ 
/* 256 */     byte[] arrayOfByte1 = null;
/*     */ 
/* 259 */     int i = localAudioFormat.getChannels() * (int)this.myAudioInputStream.getFrameLength() * localAudioFormat.getSampleSizeInBits() / 8;
/*     */     int j;
/*     */     int k;
/* 262 */     if (i > 0)
/*     */     {
/* 265 */       arrayOfByte1 = new byte[localAudioFormat.getChannels() * (int)this.myAudioInputStream.getFrameLength() * localAudioFormat.getSampleSizeInBits() / 8];
/*     */ 
/* 269 */       j = 0; k = 0;
/*     */       try
/*     */       {
/* 276 */         while (((j = this.myAudioInputStream.read(arrayOfByte1, k, arrayOfByte1.length - k)) != -1) && (k < arrayOfByte1.length))
/*     */         {
/* 278 */           k += j;
/*     */         }
/*     */       }
/*     */       catch (IOException localIOException1)
/*     */       {
/* 283 */         errorMessage("Exception thrown while reading from the AudioInputStream (location #1).");
/*     */ 
/* 285 */         printStackTrace(localIOException1);
/* 286 */         return null;
/*     */       }
/*     */ 
/*     */     }
/*     */     else
/*     */     {
/* 294 */       j = 0; k = 0; int m = 0;
/* 295 */       byte[] arrayOfByte3 = null;
/*     */ 
/* 298 */       arrayOfByte3 = new byte[SoundSystemConfig.getFileChunkSize()];
/*     */ 
/* 301 */       while ((!endOfStream(false, false)) && (j < SoundSystemConfig.getMaxFileSize()))
/*     */       {
/* 304 */         k = 0;
/* 305 */         m = 0;
/*     */         try
/*     */         {
/* 310 */           while (k < arrayOfByte3.length)
/*     */           {
/* 312 */             if ((m = this.myAudioInputStream.read(arrayOfByte3, k, arrayOfByte3.length - k)) <= 0)
/*     */             {
/* 316 */               endOfStream(true, true);
/* 317 */               break;
/*     */             }
/* 319 */             k += m;
/*     */           }
/*     */         }
/*     */         catch (IOException localIOException3)
/*     */         {
/* 324 */           errorMessage("Exception thrown while reading from the AudioInputStream (location #2).");
/*     */ 
/* 326 */           printStackTrace(localIOException3);
/* 327 */           return null;
/*     */         }
/*     */ 
/* 331 */         j += k;
/*     */ 
/* 334 */         arrayOfByte1 = appendByteArrays(arrayOfByte1, arrayOfByte3, k);
/*     */       }
/*     */ 
/*     */     }
/*     */ 
/* 340 */     byte[] arrayOfByte2 = convertAudioBytes(arrayOfByte1, localAudioFormat.getSampleSizeInBits() == 16);
/*     */ 
/* 344 */     SoundBuffer localSoundBuffer = new SoundBuffer(arrayOfByte2, localAudioFormat);
/*     */     try
/*     */     {
/* 349 */       this.myAudioInputStream.close();
/*     */     }
/*     */     catch (IOException localIOException2)
/*     */     {
/*     */     }
/*     */ 
/* 355 */     return localSoundBuffer;
/*     */   }
/*     */ 
/*     */   public boolean endOfStream()
/*     */   {
/* 364 */     return endOfStream(false, false);
/*     */   }
/*     */ 
/*     */   public void cleanup()
/*     */   {
/* 372 */     if (this.myAudioInputStream != null)
/*     */       try
/*     */       {
/* 375 */         this.myAudioInputStream.close();
/*     */       }
/*     */       catch (Exception localException) {
/*     */       }
/* 379 */     this.myAudioInputStream = null;
/*     */   }
/*     */ 
/*     */   public AudioFormat getAudioFormat()
/*     */   {
/* 389 */     if (this.myAudioInputStream == null)
/* 390 */       return null;
/* 391 */     return this.myAudioInputStream.getFormat();
/*     */   }
/*     */ 
/*     */   private synchronized boolean initialized(boolean paramBoolean1, boolean paramBoolean2)
/*     */   {
/* 402 */     if (paramBoolean1 == true)
/* 403 */       this.initialized = paramBoolean2;
/* 404 */     return this.initialized;
/*     */   }
/*     */ 
/*     */   private synchronized boolean endOfStream(boolean paramBoolean1, boolean paramBoolean2)
/*     */   {
/* 415 */     if (paramBoolean1 == true)
/* 416 */       this.endOfStream = paramBoolean2;
/* 417 */     return this.endOfStream;
/*     */   }
/*     */ 
/*     */   private static byte[] trimArray(byte[] paramArrayOfByte, int paramInt)
/*     */   {
/* 429 */     byte[] arrayOfByte = null;
/* 430 */     if ((paramArrayOfByte != null) && (paramArrayOfByte.length > paramInt))
/*     */     {
/* 432 */       arrayOfByte = new byte[paramInt];
/* 433 */       System.arraycopy(paramArrayOfByte, 0, arrayOfByte, 0, paramInt);
/*     */     }
/* 435 */     return arrayOfByte;
/*     */   }
/*     */ 
/*     */   private static byte[] convertAudioBytes(byte[] paramArrayOfByte, boolean paramBoolean)
/*     */   {
/* 447 */     ByteBuffer localByteBuffer1 = ByteBuffer.allocateDirect(paramArrayOfByte.length);
/* 448 */     localByteBuffer1.order(ByteOrder.nativeOrder());
/* 449 */     ByteBuffer localByteBuffer2 = ByteBuffer.wrap(paramArrayOfByte);
/* 450 */     localByteBuffer2.order(ByteOrder.LITTLE_ENDIAN);
/*     */     Object localObject;
/* 451 */     if (paramBoolean)
/*     */     {
/* 453 */       localObject = localByteBuffer1.asShortBuffer();
/* 454 */       ShortBuffer localShortBuffer = localByteBuffer2.asShortBuffer();
/* 455 */       while (localShortBuffer.hasRemaining())
/*     */       {
/* 457 */         ((ShortBuffer)localObject).put(localShortBuffer.get());
/*     */       }
/*     */     }
/*     */     else
/*     */     {
/* 462 */       while (localByteBuffer2.hasRemaining())
/*     */       {
/* 464 */         localByteBuffer1.put(localByteBuffer2.get());
/*     */       }
/*     */     }
/* 467 */     localByteBuffer1.rewind();
/*     */ 
/* 469 */     if (!localByteBuffer1.hasArray())
/*     */     {
/* 471 */       localObject = new byte[localByteBuffer1.capacity()];
/* 472 */       localByteBuffer1.get(localObject);
/* 473 */       localByteBuffer1.clear();
/*     */ 
/* 475 */       return localObject;
/*     */     }
/*     */ 
/* 478 */     return (B)localByteBuffer1.array();
/*     */   }
/*     */ 
/*     */   private static byte[] appendByteArrays(byte[] paramArrayOfByte1, byte[] paramArrayOfByte2, int paramInt)
/*     */   {
/* 493 */     if ((paramArrayOfByte1 == null) && (paramArrayOfByte2 == null))
/*     */     {
/* 496 */       return null;
/*     */     }
/*     */     byte[] arrayOfByte;
/* 498 */     if (paramArrayOfByte1 == null)
/*     */     {
/* 501 */       arrayOfByte = new byte[paramInt];
/*     */ 
/* 503 */       System.arraycopy(paramArrayOfByte2, 0, arrayOfByte, 0, paramInt);
/* 504 */       paramArrayOfByte2 = null;
/*     */     }
/* 506 */     else if (paramArrayOfByte2 == null)
/*     */     {
/* 509 */       arrayOfByte = new byte[paramArrayOfByte1.length];
/*     */ 
/* 511 */       System.arraycopy(paramArrayOfByte1, 0, arrayOfByte, 0, paramArrayOfByte1.length);
/* 512 */       paramArrayOfByte1 = null;
/*     */     }
/*     */     else
/*     */     {
/* 517 */       arrayOfByte = new byte[paramArrayOfByte1.length + paramInt];
/* 518 */       System.arraycopy(paramArrayOfByte1, 0, arrayOfByte, 0, paramArrayOfByte1.length);
/*     */ 
/* 520 */       System.arraycopy(paramArrayOfByte2, 0, arrayOfByte, paramArrayOfByte1.length, paramInt);
/*     */ 
/* 522 */       paramArrayOfByte1 = null;
/* 523 */       paramArrayOfByte2 = null;
/*     */     }
/*     */ 
/* 526 */     return arrayOfByte;
/*     */   }
/*     */ 
/*     */   private void errorMessage(String paramString)
/*     */   {
/* 535 */     this.logger.errorMessage("CodecWav", paramString, 0);
/*     */   }
/*     */ 
/*     */   private void printStackTrace(Exception paramException)
/*     */   {
/* 544 */     this.logger.printStackTrace(paramException, 1);
/*     */   }
/*     */ }

/* Location:           /Users/Nikita/Downloads/mcp28/jars/bin/minecraft.jar
 * Qualified Name:     paulscode.sound.codecs.CodecWav
 * JD-Core Version:    0.6.0
 */